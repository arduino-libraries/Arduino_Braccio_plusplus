/*
	UGLY MENU STUFF
*/

namespace braccio {

const int BTN_LEFT = 5;
const int BTN_RIGHT = 4;
const int BTN_UP = 2;
const int BTN_DOWN = 3;
const int BTN_SEL = A0;
const int BTN_ENTER = A1;

TFT_eSPI gfx = TFT_eSPI();

static int selTest = 0;
static SELECT(selTest, selMenu, "Select", doNothing, noEvent, noStyle
       , VALUE("Zero", 0, doNothing, noEvent)
       , VALUE("One", 1, doNothing, noEvent)
       , VALUE("Two", 2, doNothing, noEvent)
      );

static int chooseTest = -1;
static CHOOSE(chooseTest, chooseMenu, "Choose", doNothing, noEvent, noStyle
       , VALUE("First", 1, doNothing, noEvent)
       , VALUE("Second", 2, doNothing, noEvent)
       , VALUE("Third", 3, doNothing, noEvent)
       , VALUE("Last", -1, doNothing, noEvent)
      );

static MENU(subMenu, "Sub-Menu", doNothing, noEvent, noStyle
     , OP("Op", doNothing, noEvent)
     , EXIT("<Back")
    );

static MENU(mainMenu, "Braccio++", doNothing, noEvent, wrapStyle
     , OP("Op1", doNothing, noEvent)
     , OP("Op2", doNothing, noEvent)
     // ,FIELD(test,"Test","%",0,100,10,1,doNothing,noEvent,wrapStyle)
     , SUBMENU(subMenu)
     , SUBMENU(selMenu)
     , SUBMENU(chooseMenu)
     //,OP("Alert test",doAlert,enterEvent)
     , EXIT("<Back")
    );

#define TFT_GRAY RGB565(128,128,128)
const colorDef<uint16_t> colors[6] MEMMODE = {
	{{ TFT_BLACK, TFT_BLACK}, {TFT_BLACK, TFT_BLUE,  TFT_BLUE}}, //bgColor
	{{ TFT_GRAY, TFT_GRAY},  {TFT_WHITE, TFT_WHITE, TFT_WHITE}}, //fgColor
	{{ TFT_WHITE, TFT_BLACK}, {TFT_YELLOW, TFT_YELLOW, TFT_RED}}, //valColor
	{{ TFT_WHITE, TFT_BLACK}, {TFT_WHITE, TFT_YELLOW, TFT_YELLOW}}, //unitColor
	{{ TFT_WHITE, TFT_GRAY},  {TFT_BLACK, TFT_BLUE,  TFT_WHITE}}, //cursorColor
	{{ TFT_WHITE, TFT_YELLOW}, {TFT_BLUE,  TFT_RED,   TFT_RED}}, //titleColor
};

static serialIn serial(Serial);

static encoderIn<BTN_UP, BTN_DOWN, BTN_SEL, BTN_LEFT, BTN_RIGHT> encoder;
static encoderInStream<BTN_UP, BTN_DOWN, BTN_SEL, BTN_LEFT, BTN_RIGHT> encStream(encoder);
static MENU_INPUTS(in, &encStream, &serial);

#define fontW 7
#define fontH 18
#define MAX_DEPTH 4
#define GFX_WIDTH 240
#define GFX_HEIGHT 240

idx_t serialTops[MAX_DEPTH]={0};
serialOut outSerial(Serial,serialTops);

const panel panels[] MEMMODE = {{0, 0, GFX_WIDTH / fontW, GFX_HEIGHT / fontH}};
navNode* nodes[sizeof(panels) / sizeof(panel)]; //navNodes to store navigation status
panelsList pList(panels, nodes, 1); //a list of panels and nodes
idx_t eSpiTops[MAX_DEPTH]={0};
TFT_eSPIOut eSpiOut(gfx,colors,eSpiTops,pList,fontW,fontH+1);
menuOut* constMEM outputs[] MEMMODE={&outSerial,&eSpiOut};//list of output devices
outputsList out(outputs,sizeof(outputs)/sizeof(menuOut*));//outputs list controller

static NAVROOT(nav, mainMenu, MAX_DEPTH, in, out);
}